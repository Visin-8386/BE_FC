                                                                                                               MỤC LỤC          I

MỤC LỤC
       MỤC LỤC ...................................................................................................................I
       HƯỚNG DẪN ......................................................................................................... III
    BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS ................................. 1
       1.1 Yêu cầu chung của bài thực hành ....................................................................... 1
          1.1.1 Bố cục trang web ............................................................................................ 1
          1.1.2 Menu điều hướng ............................................................................................ 1
          1.1.3 Danh sách sản phẩm ....................................................................................... 1
          1.1.4 Thanh bên (Sidebar) ........................................................................................ 2
          1.1.5 Chân trang (Footer) ......................................................................................... 2
          1.1.6 CSS Grid ........................................................................................................ 2
          1.1.7 Độ phản hồi .................................................................................................... 2
       1.2 Nội dung bổ sung ............................................................................................... 2
       1.3 Chú ý ................................................................................................................. 2
       1.4 Hướng dẫn ......................................................................................................... 4
          1.4.1 Tập tin Index.html ........................................................................................... 4
          1.4.2 Tập tin Style.css ............................................................................................. 7
       1.5 Yêu cầu bổ sung............................................................................................... 11
          1.5.1 Xem chi tiết sản phẩm ................................................................................... 11
          1.5.2 Sử dụng Bootstrap ........................................................................................ 11
          1.5.3 Triển khai yêu cầu bổ sung ............................................................................. 12
    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC ................. 17
       2.1 Khởi tạo ứng dụng ASP.NET Core ..................................................................... 18
       2.2 Cấu trúc dự án ASP.NET Core MVC ................................................................... 20
          2.2.1 __Layout ...................................................................................................... 21
          2.2.2 Razor View Engine ......................................................................................... 22
          2.2.3 RenderBody .................................................................................................. 22
          2.2.4 RenderSectionAsync ...................................................................................... 23
       2.3 Bài tập ............................................................................................................. 23
          2.3.1 Yêu Cầu Bài Thực Hành: Ứng Dụng Thêm/Đọc/Xóa/Sửa trên ASP.NET Core MVC ... 23
          2.3.2 Code Mẫu Chi Tiết ......................................................................................... 24
          2.3.3 Kết quả ........................................................................................................ 35
          2.3.4 Bổ sung tính năng upload file cho ứng dụng ..................................................... 36
          2.3.5 Yêu cầu bổ sung............................................................................................ 40
    BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)
...................................................................................................................................... 41
       3.1 Bài tập ............................................................................................................. 41
          3.1.1 Yêu cầu ........................................................................................................ 41
          3.1.2 Hướng dẫn thực hiện ..................................................................................... 41
          3.1.3 Kết quả ........................................................................................................ 55
    II         MỤC LỤC



          3.1.4 Yêu cầu bổ sung ............................................................................................56
    BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2) .... 60
       4.1 Bài thực hành .................................................................................................. 60
       4.2 Hướng dẫn thực hiện........................................................................................ 60
          4.2.1 Cấu Hình ASP.NET Core Identity ......................................................................60
          4.2.2 Scaffolding ASP.NET Core Identity ....................................................................63
          4.2.3 Thêm Liên Kết Đăng Ký và Đăng Nhập ..............................................................65
          4.2.4 Phần vùng Area .............................................................................................74
       4.3 Yêu cầu bổ sung .............................................................................................. 80
    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)
...................................................................................................................................... 81
       5.1 Mục tiêu của bài thực hành .............................................................................. 81
          5.1.1 Yêu cầu.........................................................................................................81
          5.1.2 Xây dựng giao diện hiển thị Danh sách sản phẩm người dùng ..............................81
       5.2 Hướng dẫn thực hiện........................................................................................ 84
          5.2.1 Code mẫu thực hiện chức năng giỏ hàng ...........................................................84
          5.2.2 Hướng dẫn thực hiện chức năng đặt hàng ..........................................................88
          5.2.3 Yêu cầu bổ sung ............................................................................................91
    BÀI 6: RESTFUL API .................................................................................................. 92
       6.1 Mục tiêu của bài thực hành .............................................................................. 92
          6.1.1 Giới thiệu ......................................................................................................92
          6.1.2 Yêu cầu.........................................................................................................93
       6.2 Hướng dẫn thực hiện........................................................................................ 93
       6.3 Yêu cầu bổ sung ............................................................................................ 106
    TÀI LIỆU THAM KHẢO ............................................................................................. 107
                                                                    HƯỚNG DẪN   III

HƯỚNG DẪN
MÔ TẢ MÔN HỌC
    Học phần trang bị cho sinh viên những kiến thức và kỹ năng cơ bản về ASP.NET
Core MVC để có thể xây dựng các ứng dụng web từ đơn giản đến nâng cao. Sinh viên
sẽ nắm được các khái niệm cơ bản về ASP.NET Core MVC như: cấu trúc chung của một
ứng dụng MVC, vai trò và mối quan hệ của các thành phần chính như Controller, Action,
View, Model. Sinh viên sẽ hiểu được sự khác biệt giữa ASP.NET Core MVC với các
framework khác như ASP.NET Web Form, ASP.NET MVC cũ. Điều này giúp sinh viên
nắm được lợi thế của ASP.NET Core MVC để có thể lựa chọn và áp dụng phù hợp. Cụ
thể, Sinh viên sẽ biết cách tạo project ASP.NET Core MVC, tạo controller và action, tạo
view và layout, tạo model và sử dụng Entity Framework Core, xử lý form và validate
dữ liệu, cấu hình routing và xây dựng hệ thống authentication. Những kiến thức và kỹ
năng này sẽ giúp sinh viên có thể tự tin xây dựng các ứng dụng web bằng ASP.NET
Core MVC.


NỘI DUNG MÔN HỌC
   Bài 1. Xây dựng layout cho trang web bán hàng bằng HTML & CSS

   Bài 2. Xây dựng ứng dụng cơ bản với ASP.NET Core MVC

   Bài 3: Xây dựng ứng dụng website bán hàng với ASP.NET Core MVC (Phần 1)

   Bài 4: Xây dựng ứng dụng website bán hàng với APS.NET Core MVC (Phần 2)

   Bài 5: Xây dựng ứng dụng website bán hàng với APS.NET Core MVC (Phần 3)

   Bài 6: Xây dựng ứng dụng website bán hàng với APS.NET Core MVC (Phần 4)


KIẾN THỨC TIỀN ĐỀ
    Kiến thức cơ bản về lập trình hướng đối tượng bằng C# hoặc VB.NET. Điều này bao
gồm các khái niệm như lớp, đối tượng, kế thừa, đa hình,...

    Kiến thức cơ bản về cơ sở dữ liệu, đặc biệt là cách thao tác với cơ sở dữ liệu SQL
Server.
  IV      HƯỚNG DẪN




YÊU CẦU MÔN HỌC
   Người học phải dự học đầy đủ các buổi lên lớp và làm bài tập đầy đủ ở nhà.


CÁCH TIẾP NHẬN NỘI DUNG MÔN HỌC
   Để học tốt môn này, người học cần ôn tập các bài đã học, trả lời các câu hỏi và làm
đầy đủ bài tập; đọc trước bài mới và tìm thêm các thông tin liên quan đến bài học.

   Đối với mỗi bài học, người học đọc trước mục tiêu và tóm tắt bài học, sau đó đọc nội
dung bài học. Kết thúc mỗi ý của bài học, người học cần thực hành đầy đủ các hướng
dẫn trong phần bài tập.
                                                                 HƯỚNG DẪN   V
PHƯƠNG PHÁP ĐÁNH GIÁ MÔN HỌC
    Môn học được đánh giá gồm:

   Điểm chuyên cần (30%): Hình thức và cách đánh giá do giảng viên dạy thực hành
    quyết định được phê duyệt của bộ môn.

   Điểm bài tập (70%): Hình thức làm bài tập trong các buổi học thực hành và giảng
    viên đánh giá chấm điểm. Danh sách bài tập thực hành được bộ môn kiểm duyệt và
    cung cấp vào đầu khóa học.
                                      BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   1



BÀI 1: XÂY DỰNG LAYOUT CHO
                     TRANG WEB BẰNG HTML
                     & CSS
Sau khi học xong bài này, sinh viên có thể:

   -   Hiểu và biết cách sử dụng HTML & CSS trong việc thiết kế các trang web tĩnh.

   -   Có khả năng thiết kế được các trang web với tính linh hoạt cao và đẹp mắt.

   -   Biết cách thiết kế trang web đảm bảo được tính nhất quán và trải nghiệm người
       dùng tốt trên cả máy tính và thiết bị di động.


1.1 Yêu cầu chung của bài thực hành
1.1.1 Bố cục trang web
          Chia trang thành hai cột trên máy tính. Cột trái sẽ hiển thị sản phẩm và cột
           phải sẽ hiển thị thông tin mạng xã hội.

          Trên thiết bị di động, hiển thị các nội dung thành 1 cột.


1.1.2 Menu điều hướng
          Thêm một menu điều hướng ở phía trên trang web với ít nhất ba liên kết:
           Trang chủ, Sản phẩm và Liên hệ.


1.1.3 Danh sách sản phẩm
          Tạo một danh sách sản phẩm trong cột trái.

          Hiển thị mỗi sản phẩm trong một thẻ sản phẩm với hình ảnh, tên sản phẩm,
           mô tả và giá.
  2       BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS



1.1.4 Thanh bên (Sidebar)
         Tạo một phần sidebar trong cột phải

         Thêm ít nhất bốn liên kết mạng xã hội vào sidebar (ví dụ: Facebook, Twitter,
          Instagram, LinkedIn).

         Sử dụng font-awesome để hiển thị các icon cho mạng xã hội tương ứng.


1.1.5 Chân trang (Footer)
         Tạo một phần footer ở dưới cùng của trang web.

         Trên máy tính, hiển thị ba cột trong footer. Trên thiết bị di động, hiển thị
          thành 1 cột, các cột xếp chồng lên nhau.


1.1.6 CSS Grid
         Sử dụng CSS Grid để xây dựng bố cục của trang web.


1.1.7 Độ phản hồi
         Đảm bảo trang web đáp ứng tốt trên các kích thước màn hình khác nhau.


1.2 Nội dung bổ sung
         Tùy chỉnh màu sắc, kiểu chữ và biểu đồ màu sắc để làm cho trang web thẩm
          mỹ hơn.

         Thêm hiệu ứng hover cho sản phẩm và các liên kết.

         Sử dụng hình ảnh thay thế cho các sản phẩm.


1.3 Chú ý
         Sử dụng HTML và CSS để thực hiện bài tập này.

         Tuân theo các nguyên tắc CSS tốt như sử dụng các class và id có ý nghĩa.
        BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   3




Hình 1.1 Thực hành HTML và CSS
  4   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS




1.4 Hướng dẫn
1.4.1 Tập tin Index.html
BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   5
6   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS
                          BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   7
1.4.2 Tập tin Style.css
8   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS
BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   9
10   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS
                                    BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   11




1.5 Yêu cầu bổ sung
1.5.1 Xem chi tiết sản phẩm
     - Khi người dùng nhấp vào một sản phẩm trong danh sách sản phẩm, họ sẽ được
chuyển hướng đến một trang xem chi tiết sản phẩm.

     - Trang xem sản phẩm cần hiển thị thông tin chi tiết về sản phẩm, bao gồm hình
ảnh lớn, tên sản phẩm, mô tả chi tiết và giá cả.

     - Thêm một nút "Quay lại" hoặc "Tiếp tục mua sắm" để người dùng có thể trở lại
danh sách sản phẩm.


1.5.2 Sử dụng Bootstrap
     - Thay vì sử dụng CSS tùy chỉnh, bạn có thể sử dụng Bootstrap để xây dựng giao
diện tương tự.

     - Thêm tập tin của Bootstrap CSS và JavaScript trong mã HTML (có thể sử dụng
các phiên bản Bootstrap từ trang chính thức của Bootstrap).

     - Sử dụng các lớp và thành phần của Bootstrap để thiết kế trang web
  12     BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS



1.5.3 Triển khai yêu cầu bổ sung

1.5.3.1 Xem chi tiết sản phẩm

     - Tạo một trang mới trong dự án của bạn để hiển thị thông tin chi tiết về sản
phẩm.

     - Trong danh sách sản phẩm, sử dụng một thẻ `<a>` để bao quanh hình ảnh và
tên sản phẩm. Đặt href của thẻ `<a>` thành URL của trang xem chi tiết sản phẩm.

     - Sử dụng một nút hoặc liên kết để cho phép người dùng quay lại trang danh sách
sản phẩm.


1.5.3.2 Sử dụng Bootstrap

     - Tải Bootstrap CSS và JavaScript từ trang chính thức của Bootstrap
(https://getbootstrap.com/).

     - Bao gồm tệp Bootstrap CSS và JavaScript vào mã HTML của bạn, thường được
đặt trong phần `<head>` của tệp HTML.

     - Sử dụng lớp và các thành phần Bootstrap để thiết kế giao diện của trang web.
                            BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   13
1.5.3.3 Kết quả thực hiện bằng Bootstrap




             Hình 1.2. Kết quả thực hiện bằng Bootstrap




            Hình 1.3 Kết quả hiểu thị trên thiết bị di động
14   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS
BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS   15
16   BÀI 1: XÂY DỰNG LAYOUT CHO TRANG WEB BẰNG HTML & CSS




                                   ---Hết Lab TH 01---
                           BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   17

BÀI 2: XÂY DỰNG ỨNG DỤNG
                 WEBSITE CƠ BẢN VỚI
                 ASP.NET CORE MVC
Sau khi học xong bài này, sinh viên có thể:

-   Hiểu rõ cấu trúc nội bộ của ứng dụng ASP.NET Core MVC, bao gồm sự phân chia
    và tương tác giữa các lớp và modules.

-   Hiểu cơ chế truyền tải và nhận dữ liệu trong mô hình MVC, bao gồm cách thức
    hoạt động của binding và routing

-   Nắm vững khái niệm và quản lý của 'view', cũng như sử dụng Razor syntax

-   Hiểu sâu về cấu trúc và chức năng của 'model' trong MVC, cũng như cách thức
    tương tác và xử lý dữ liệu.

-   Hiểu rõ vai trò của 'controller' trong MVC, bao gồm cách quản lý luồng dữ liệu,
    xử lý yêu cầu và phản hồi.

-   Hiểu rõ cách truyền 'model' giữa các thành phần trong MVC.

-   Thực hành kỹ thuật xử lý và lưu trữ hình ảnh.
 18    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC




2.1 Khởi tạo ứng dụng ASP.NET Core
 Khởi động phần mềm Visual Studio 2022




                    Hình 2.1 Tạo project ASP.NET CORE mới




                            Hình 2.2 Đặt tên cho Project
        BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   19




Hình 2.3 Thiết lập Framework cho project




 Hình 2.4 Cấu trúc thư mục cho project
  20      BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC




                             Hình 2.5 Tiến hành Run project




2.2 Cấu trúc dự án ASP.NET Core MVC
  1. Dependencies:

   Thư mục này bao gồm các phụ thuộc cần thiết, tức là các gói cần thiết để chạy ứng
dụng ASP.NET Core.

  2. Properties:

   Thư mục này chứa tệp launchsettings.json và chỉ được sử dụng trong môi trường
phát triển.

  3. wwwroot:

   Đây là thư mục gốc web của dự án. Thư mục wwwroot sẽ chứa tất cả các tệp tĩnh
như .css, .js, và các tệp bootstrap, v.v.

  4. Controllers:

   Chứa các lớp điều khiển để xử lý nghiệp vụ trong ứng dụng.

  5. Models:

   Chứa các lớp Model để thao tác với dữ liệu hoặc trong ứng dụng web.
                            BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   21
  6. Views:

  Chứa các tệp giao diện Razor (.cshtml) để hiển thị nội dung HTML. Razor là một
công cụ giao diện được sử dụng trong ASP.NET để tạo HTML động

  7. Shared:

  Thư mục chứa _Layout.cshtml. Đó là bố cục mặc định cho ứng dụng ASP.NET Core
bao gồm các thành phần dùng chung của tất cả các trang con.

  8. appsettings.json:

  Tệp này sẽ chứa các cài đặt chung trên toàn bộ ứng dụng, như chuỗi kết nối, biến
toàn cục phạm vi ứng dụng, v.v..

  9. Program.cs:

  Lớp Program chứa phương thức Main. Phương thức Main chịu trách nhiệm thiết lập
máy chủ web, cấu hình các dịch vụ, cấu hình các Thành phần Middleware và khởi động
ứng dụng để ứng dụng có thể lắng nghe các yêu cầu từ client.


2.2.1 __Layout




                         Hình 2.6 Cấu trúc của __Layout
 22   BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



2.2.2 Razor View Engine




                  Hình 2.7 Mô hình code Razor View Engine

2.2.3 RenderBody




                          Hình 2.8 Mô hình RenderBody
                          BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   23
2.2.4 RenderSectionAsync




                     Hình 2.9 Mô tả RenderSectionAsync

Khai báo tại trang __layout

@await RenderSectionAsync("Scripts", required: true)

Khai báo tại trang View

@section Scripts{

}

2.3 Bài tập
2.3.1 Yêu Cầu Bài Thực Hành: Ứng Dụng
     Thêm/Đọc/Xóa/Sửa trên ASP.NET Core MVC

2.3.1.1 Mục Đích:
  24       BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



     Xây dựng ứng dụng Web với các thao tác CRUD sử dụng ASP.NET Core MVC, áp
dụng mô hình MVC, Model Binding, Data Annotations và sử dụng Repository
Pattern với Mock Data.


2.3.1.2 Yêu Cầu Cụ Thể:

1. Cấu Hình Dự Án và Môi Trường

  - Sử dụng ASP.NET Core MVC.

  - Khởi tạo dự án mới với ASP.NET Core Web App (MVC, .NET 6).

2. Tạo Models

  - Tạo `Product` và `Category` models với các thuộc tính thích hợp.

  - Sử dụng Data Annotations cho validation.

3. Repository Pattern

  - Tạo `IProductRepository` và `ICategoryRepository` interfaces.

  - Implement các interfaces này với Mock Data.

4. Controllers

  - Tạo `ProductController` và `CategoryController`.

  - Implement các actions: `Add`, `Display`, `Delete`, `Update` cho sản phẩm.

5. Views

  - Tạo các views tương ứng cho các chức năng trên.

6. Routing và Navigation

  - Cấu hình routing và tạo menu điều hướng.


2.3.2 Code Mẫu Chi Tiết
                        BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   25
 Models

// Product.cs
public class Product
{
    public int Id { get; set; }
    [Required, StringLength(100)]
    public string Name { get; set; }
    [Range(0.01, 10000.00)]
    public decimal Price { get; set; }
    public string Description { get; set; }
    public int CategoryId { get; set; }
}

// Category.cs
public class Category
{
    public int Id { get; set; }
    [Required, StringLength(50)]
    public string Name { get; set; }
}

 Tiến hành tạo thư mục Repositories:
  26    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



 IProductRepository.cs

using System.Collections.Generic;
using YourNamespace.Models; // Thay thế bằng namespace thực tế của bạn

public interface IProductRepository
{
    IEnumerable<Product> GetAll();
    Product GetById(int id);
    void Add(Product product);
    void Update(Product product);
    void Delete(int id);
}

 MockProductRepository.cs

using System.Collections.Generic;
using System.Linq;
using YourNamespace.Models; // Thay thế bằng namespace thực tế của bạn

public class MockProductRepository : IProductRepository
{
    private readonly List<Product> _products;

    public MockProductRepository()
    {
        // Tạo một số dữ liệu mẫu
        _products = new List<Product>
        {
            new Product { Id = 1, Name = "Laptop", Price = 1000,
Description = "A high-end laptop"},
            // Thêm các sản phẩm khác
        };
    }

    public IEnumerable<Product> GetAll()
    {
        return _products;
    }

    public Product GetById(int id)
    {
        return _products.FirstOrDefault(p => p.Id == id);
    }

    public void Add(Product product)
    {
        product.Id = _products.Max(p => p.Id) + 1;
                        BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   27
        _products.Add(product);
    }

    public void Update(Product product)
    {
        var index = _products.FindIndex(p => p.Id == product.Id);
        if (index != -1)
        {
            _products[index] = product;
        }
    }

    public void Delete(int id)
    {
        var product = _products.FirstOrDefault(p => p.Id == id);
        if (product != null)
        {
            _products.Remove(product);
        }
    }
}
 ICategoryRepository

public interface ICategoryRepository
{
    IEnumerable<Category> GetAllCategories();
}

 MockCategoryRepository.cs

public class MockCategoryRepository : ICategoryRepository
{
    private List<Category> _categoryList;

    public MockCategoryRepository()
    {
        _categoryList = new List<Category>
        {
            new Category { Id = 1, Name = "Laptop" },
            new Category { Id = 2, Name = "Desktop" },
            // Thêm các category khác
        };
    }

    public IEnumerable<Category> GetAllCategories()
    {
        return _categoryList;
    }
}
  28    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



 ProductController.cs

using Microsoft.AspNetCore.Mvc;
using YourNamespace.Models; // Thay thế bằng namespace thực tế của bạn
using YourNamespace.Repositories; // Thay thế bằng namespace thực tế
của bạn

public class ProductController : Controller
{
    private readonly IProductRepository _productRepository;
    private readonly ICategoryRepository _categoryRepository;

    public ProductController(IProductRepository productRepository,
ICategoryRepository categoryRepository)
    {
        _productRepository = productRepository;
        _categoryRepository = categoryRepository;
    }


    public IActionResult Add()
    {
        var categories = _categoryRepository.GetAllCategories();
        ViewBag.Categories = new SelectList(categories, "Id", "Name");
        return View();
    }

    [HttpPost]
    public IActionResult Add(Product product)
    {
        if (ModelState.IsValid)
        {
            _productRepository.Add(product);
            return RedirectToAction("Index"); // Chuyển hướng tới trang
danh sách sản phẩm
        }
        return View(product);
    }

    // Các actions khác như Display, Update, Delete

    // Display a list of products
    public IActionResult Index()
    {
        var products = _productRepository.GetAll();
        return View(products);
    }
                    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   29
// Display a single product
public IActionResult Display(int id)
{
    var product = _productRepository.GetById(id);
    if (product == null)
    {
        return NotFound();
    }
    return View(product);
}

// Show the product update form
public IActionResult Update(int id)
{
    var product = _productRepository.GetById(id);
    if (product == null)
    {
        return NotFound();
    }
    return View(product);
}

// Process the product update
[HttpPost]
public IActionResult Update(Product product)
{
    if (ModelState.IsValid)
    {
        _productRepository.Update(product);
        return RedirectToAction("Index");
    }
    return View(product);
}

// Show the product delete confirmation
public IActionResult Delete(int id)
{
    var product = _productRepository.GetById(id);
    if (product == null)
    {
        return NotFound();
    }
    return View(product);
}

// Process the product deletion
[HttpPost, ActionName("DeleteConfirmed")]
public IActionResult DeleteConfirmed(int id)
    30   BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



     {
         _productRepository.Delete(id);
         return RedirectToAction("Index");
     }
}

 Program.cs

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

builder.Services.AddSingleton<IProductRepository,
MockProductRepository>();
builder.Services.AddScoped<ICategoryRepository,
MockCategoryRepository>();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
                        BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   31
   Tạo folder Product trong folder Views chứa các file bên dưới:




   Add.cshtml

@model YourNamespace.Models.Product
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Add Product";
}

<h1>Add Product</h1>

<form asp-action="Add">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Price"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-
control"></textarea>
        <span asp-validation-for="Description" class="text-
danger"></span>
    </div>
  32     BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



    <div class="form-group">
        <label asp-for="CategoryId">Category</label>
        <select asp-for="CategoryId" asp-items="ViewBag.Categories"
class="form-control"></select>
    </div>
    <button type="submit" class="btn btn-primary">Add</button>
</form>


Giải Thích

        Index: Hiển thị danh sách tất cả sản phẩm.
        Display: Hiển thị thông tin chi tiết của một sản phẩm cụ thể.
        Update (GET): Hiển thị form để cập nhật thông tin sản phẩm.
        Update (POST): Xử lý việc cập nhật sản phẩm.
        Delete (GET): Hiển thị xác nhận xóa sản phẩm.
        DeleteConfirmed: Xử lý việc xóa sản phẩm từ database.
   Đối với mỗi action, bạn sẽ cần tạo các views tương ứng trong thư mục
     Views/Product, ví dụ Index.cshtml, Display.cshtml, Update.cshtml, và
     Delete.cshtml.
   Đảm bảo rằng bạn đã đăng ký IProductRepository và implementation của
     nó (ví dụ: MockProductRepository) trong Program.cs của ứng dụng để
     Dependency Injection hoạt động đúng cách.

   Index.cshtml (Hiển Thị Danh Sách Sản Phẩm)

@model IEnumerable<YourNamespace.Models.Product>

<h2>Products</h2>

<table class="table">
    <thead>
        <tr>
             <th>Name</th>
             <th>Price</th>
             <th>Description</th>
             <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var product in Model)
    {
        <tr>
                           BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   33
            <td>@product.Name</td>
            <td>@product.Price</td>
            <td>@product.Description</td>
            <td>
              <a asp-action="Display" asp-route-id="@product.Id">View</a> |
              <a asp-action="Update" asp-route-id="@product.Id">Edit</a> |
              <a asp-action="Delete" asp-route-id="@product.Id">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>

   Display.cshtml (Hiển Thị Thông Tin Chi Tiết Sản Phẩm)

@model YourNamespace.Models.Product

<h2>Product Details</h2>

<div>
    <h4>Name: @Model.Name</h4>
    <h4>Price: @Model.Price</h4>
    <h4>Description: @Model.Description</h4>
</div>

<a asp-action="Index">Back to List</a>

   Delete.cshtml (Xác Nhận Xóa Sản Phẩm)

@model YourNamespace.Models.Product

<h2>Are you sure you want to delete this?</h2>

<div>
    <h4>Name: @Model.Name</h4>
    <h4>Price: @Model.Price</h4>
    <h4>Description: @Model.Description</h4>
</div>

<form asp-action="DeleteConfirmed" method="post">
    <input type="hidden" asp-for="Id" />
    <input type="submit" value="Delete" class="btn btn-danger" /> |
    <a asp-action="Index">Cancel</a>
</form>
  34    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



   Update.cshtml (Cập Nhật Sản Phẩm)

@model YourNamespace.Models.Product

<h2>Edit Product</h2>

<form asp-action="Update">
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Price"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-
control"></textarea>
        <span asp-validation-for="Description" class="text-
danger"></span>
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
</form>
                BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   35
2.3.3 Kết quả
  36      BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC




2.3.4 Bổ sung tính năng upload file cho ứng dụng
    Để bổ sung tính năng thêm hình ảnh đại diện và nhiều hình ảnh cho sản phẩm
trong ứng dụng trên, bạn cần mở rộng model `Product`, cập nhật views và controllers
để xử lý việc upload hình ảnh. Dưới đây là các bước cơ bản để thực hiện điều này:

    Mở Rộng Model `Product`

    Mở rộng model `Product` để bao gồm các thuộc tính cho hình ảnh đại diện và
danh sách các hình ảnh:

public class Product
{
     // Các thuộc tính hiện có
     public string? ImageUrl { get; set; } // Đường dẫn đến hình ảnh đại diện
     public List<string>? ImageUrls { get; set; } // Danh sách các hình ảnh
khác
}
                            BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   37
   Tạo folder images trong wwwroot để upload hình ảnh




   Cập Nhật View `Add.cshtml`

Cập nhật view `Add.cshtml` để thêm fields cho việc upload hình ảnh:

@model YourNamespace.Models.Product //thay thế Project Name của bạn

<!-- Phần còn lại của form -->

<div class="form-group">
    <label asp-for="ImageUrl">Image</label>
    <input type="file" asp-for="ImageUrl" class="form-control" />
</div>

`
<button type="submit" class="btn btn-primary">Add</button>

   Cập nhập thêm vào form Add.cshtml trong Folder Product




   Xử Lý Upload Trong Controller

  Cập nhật `ProductController` để xử lý việc upload hình ảnh:
    38    BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



 [HttpPost]
public async Task<IActionResult> Add(Product product, IFormFile
imageUrl, List<IFormFile> imageUrls)
{
    if (ModelState.IsValid)
    {
        if (imageUrl!= null)
        {
            // Lưu hình ảnh đại diện
            product.ImageUrl = await SaveImage(imageUrl);
        }

          if (imageUrls!= null)
          {
              product.ImageUrls = new List<string>();
              foreach (var file in imageUrls)
              {
                  // Lưu các hình ảnh khác
                  product.ImageUrls.Add(await SaveImage(file));
              }
          }

          _productRepository.Add(product);
          return RedirectToAction("Index");
     }

     return View(product);
}

private async Task<string> SaveImage(IFormFile image)
{
    // Thay đổi đường dẫn theo cấu hình của bạn
    var savePath = Path.Combine("wwwroot/images", image.FileName);
    using (var fileStream = new FileStream(savePath, FileMode.Create))
    {
        await image.CopyToAsync(fileStream);
    }
    return "/images/" + image.FileName; // Trả về đường dẫn tương đối
}

     Cấu Hình `Program.cs`

    Đảm bảo rằng ứng dụng của bạn cấu hình đúng cách để phục vụ các tệp tĩnh:

app.UseStaticFiles(); // Cho phép ứng dụng phục vụ các tệp tĩnh từ thư
mục wwwroot
                           BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC   39
   Kết quả:




   Hiển Thị Hình Ảnh

  Cập nhật các views cần thiết để hiển thị hình ảnh của sản phẩm. Ví dụ, trong
`Display.cshtml`:
  40       BÀI 2: XÂY DỰNG ỨNG DỤNG WEBSITE CƠ BẢN VỚI ASP.NET CORE MVC



@model YourNamespace.Models.Product
<h2>Product Details</h2>

    <div>
        <h4>Name: @Model.Name</h4>
        <h4>Price: @Model.Price</h4>
        <h4>Description: @Model.Description</h4>
    <img src="@Model.ImageUrl" alt="Product Image" style="width: 300px;
height: auto;" />

        @if (Model.ImageUrls != null)
        {
           foreach (var imageUrl in Model.ImageUrls)
           {
             img src="@imageUrl" alt="Product Image" style="width:
300px; height: auto;" />
           }
        }
    </div>

Kết quả:




Lưu ý: Thêm kiểm tra và xử lý lỗi cho các tình huống như tệp không phải hình ảnh
được tải lên hoặc kích thước tệp quá lớn.


2.3.5 Yêu cầu bổ sung
Áp dụng giao diện đã thiết kế ở LAB 1 cho ứng dụng website bán hàng
                    BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   41

BÀI 3: XÂY DỰNG ỨNG DỤNG
                  WEBSITE BÁN HÀNG
                  VỚI ASP.NET CORE MVC
                  (PHẦN 1)
  Sau khi học xong bài này, sinh viên có thể nắm được:

  -   Học cách sử dụng Entity Framework Core để tương tác với CSDL MS SQL
      Server.
  -   Xây dựng ứng dụng web bán hàng dựa trên ASP.NET Core MVC, kết hợp với cơ
      sở dữ liệu và Entity Framework Core.


3.1 Bài tập
3.1.1 Yêu cầu
  Xây dựng web bán hàng có các chức năng Hiển thị/ Thêm/ Xóa/ Sửa với Entity
Framework Core và Cơ sở dữ liệu MS SQL Server


3.1.2 Hướng dẫn thực hiện

   Cài Đặt Gói NuGet Cần Thiết

  Cài đặt các gói sau bằng NuGet:

  -   ‘ Microsoft.EntityFrameworkCore` phiên bản 8.0.3
  -   `Microsoft.EntityFrameworkCore.SqlServer` phiên bản 8.0.3 (hoặc provider cơ
      sở dữ liệu khác)
  -   `Microsoft.EntityFrameworkCore.Tools` phiên bản 8.0.3
42     BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)




   Cài đặt Tương tự cho các Nuget khác.

 Thiết Kế Models

Trong thư Models Tạo các models `Product` và `Category`:

public class Product
{
    public int Id { get; set; }
    [Required, StringLength(100)]
    public string Name { get; set; }
    [Range(0.01, 10000.00)]
    public decimal Price { get; set; }
    public string Description { get; set; }
    public string? ImageUrl { get; set; }
    public List<ProductImage>? Images { get; set; }
    public int CategoryId { get; set; }
    public Category? Category { get; set; }
}

public class Category
{
                 BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   43
      public int Id { get; set; }
      [Required, StringLength(50)]
      public string Name { get; set; }
      public List<Product>? Products { get; set; }
  }

  public class ProductImage
  {
      public int Id { get; set; }
      public string Url { get; set; }
      public int ProductId { get; set; }
      public Product? Product { get; set; }
  }

   Cấu Hình Entity Framework Core

  Tạo một lớp `ApplicationDbContext` trong thư mục Models và cấu hình:

  using Microsoft.EntityFrameworkCore;

   public class ApplicationDbContext : DbContext
   {
       public
ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) :
base(options)
       {
       }

      public DbSet<Product> Products { get; set; }
      public DbSet<Category> Categories { get; set; }
      public DbSet<ProductImage> ProductImages { get; set; }
  }

   Cấu hình EF Core trong file `Program.cs`:

  var builder = WebApplication.CreateBuilder(args);

  builder.Services.AddDbContext<ApplicationDbContext>(options =>

options.UseSqlServer(builder.Configuration.GetConnectionString("Default
Connection")));

  // Các cấu hình khác

   Cấu hình connection string trong `appsettings.json`.

   Xem tên Server name trong SQL Server
  44      BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)




"ConnectionStrings": {
  "DefaultConnection":
"Server=Servername;Database=DbName;Trusted_Connection=True;TrustServerCertificate=True"
},

   Lưu ý: Thay bằng thông tin Server name và Database của mình




    Tạo Migrations
               BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   45
 Tạo migrations để tạo cơ sở dữ liệu:

Add-Migration Initial




 Update Database

Update-Database
  46      BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)




   Tạo thư mục Repositories và thêm các file sau:

    IProductRepository.cs và ICategoryRepository.cs

   Đây là các interface định nghĩa các phương thức cần thiết để tương tác với cơ sở dữ
liệu cho Product và Category.

   public interface IProductRepository
   {
       Task<IEnumerable<Product>> GetAllAsync();
       Task<Product> GetByIdAsync(int id);
       Task AddAsync(Product product);
       Task UpdateAsync(Product product);
       Task DeleteAsync(int id);
   }

   public interface ICategoryRepository
   {
       Task<IEnumerable<Category>> GetAllAsync();
       Task<Category> GetByIdAsync(int id);
       Task AddAsync(Category category);
       Task UpdateAsync(Category category);
       Task DeleteAsync(int id);
   }
                   BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   47
   EFProductRepository và EFCategoryRepository

public class EFProductRepository : IProductRepository
 {
     private readonly ApplicationDbContext _context;

       public EFProductRepository(ApplicationDbContext context)
       {
           _context = context;
       }

       public async Task<IEnumerable<Product>> GetAllAsync()
       {
          // return await _context.Products.ToListAsync();
           return await _context.Products
       .Include(p => p.Category) // Include thông tin về category
       .ToListAsync();

       }

     public async Task<Product> GetByIdAsync(int id)
     {
        // return await _context.Products.FindAsync(id);
        // lấy thông tin kèm theo category
           return await _context.Products.Include(p =>
p.Category).FirstOrDefaultAsync(p => p.Id == id);
     }

       public async Task AddAsync(Product product)
       {
           _context.Products.Add(product);
           await _context.SaveChangesAsync();
       }

       public async Task UpdateAsync(Product product)
       {
           _context.Products.Update(product);
           await _context.SaveChangesAsync();
       }

       public async Task DeleteAsync(int id)
       {
           var product = await _context.Products.FindAsync(id);
           _context.Products.Remove(product);
           await _context.SaveChangesAsync();
       }

   }
  48       BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



  public class EFCategoryRepository : ICategoryRepository
  {
      private readonly ApplicationDbContext _context;

         public EFCategoryRepository(ApplicationDbContext context)
         {
             _context = context;
         }

         // Tương tự như EFProductRepository, nhưng cho Category
  }

   Đăng Ký trong Program.cs

  builder.Services.AddScoped<IProductRepository, EFProductRepository>();
  builder.Services.AddScoped<ICategoryRepository, EFCategoryRepository>();




   Tạo và Cập Nhật Controllers

  Sử Dụng Repository trong Controllers

using   ProjectName.Models;
using   ProjectName.Repositories;
using   Microsoft.AspNetCore.Mvc;
using   Microsoft.AspNetCore.Mvc.Rendering;

namespace ProjectName.Controllers
{
    public class ProductController : Controller
    {
        private readonly IProductRepository _productRepository;
        private readonly ICategoryRepository _categoryRepository;
        public ProductController(IProductRepository productRepository,
ICategoryRepository categoryRepository)
        {
            _productRepository = productRepository;
            _categoryRepository = categoryRepository;
                  BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   49
       }

       // Hiển thị danh sách sản phẩm
       public async Task<IActionResult> Index()
       {
           var products = await _productRepository.GetAllAsync();
           return View(products);
       }
       // Hiển thị form thêm sản phẩm mới
       public async Task<IActionResult> Add()
       {
           var categories = await _categoryRepository.GetAllAsync();
           ViewBag.Categories = new SelectList(categories, "Id", "Name");

            return View();
       }

        // Xử lý thêm sản phẩm mới
        [HttpPost]
        public async Task<IActionResult> Add(Product product, IFormFile
imageUrl)
        {
            if (ModelState.IsValid)
            {
                if (imageUrl != null)
                {
                    // Lưu hình ảnh đại diện tham khảo bài 02 hàm SaveImage
                    product.ImageUrl = await SaveImage(imageUrl);
                }

                await _productRepository.AddAsync(product);
                return RedirectToAction(nameof(Index));
            }
            // Nếu ModelState không hợp lệ, hiển thị form với dữ liệu đã nhập
            var categories = await _categoryRepository.GetAllAsync();
            ViewBag.Categories = new SelectList(categories, "Id", "Name");
            return View(product);
       }

    // Viết thêm hàm SaveImage (tham khảo bài 02)

    private async Task<string> SaveImage(IFormFile image)
     {
           //Thay đổi đường dẫn theo cấu hình của bạn
         var savePath = Path.Combine("wwwroot/images", image.FileName);
         using (var fileStream = new FileStream(savePath, FileMode.Create))
         {
             await image.CopyToAsync(fileStream);
         }
         return "/images/" + image.FileName; // Trả về đường dẫn tương đối
     }

    //Nhớ tạo folder images trong wwwroot
  50       BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



          // Hiển thị thông tin chi tiết sản phẩm
          public async Task<IActionResult> Display(int id)
          {
              var product = await _productRepository.GetByIdAsync(id);
              if (product == null)
              {
                  return NotFound();
              }
              return View(product);
          }
          // Hiển thị form cập nhật sản phẩm
          public async Task<IActionResult> Update(int id)
          {
              var product = await _productRepository.GetByIdAsync(id);
              if (product == null)
              {
                  return NotFound();
              }

            var categories = await _categoryRepository.GetAllAsync();
            ViewBag.Categories = new SelectList(categories, "Id", "Name",
product.CategoryId);
            return View(product);
        }
        // Xử lý cập nhật sản phẩm
        [HttpPost]
        public async Task<IActionResult> Update(int id, Product product,
IFormFile imageUrl)
        {
            ModelState.Remove("ImageUrl"); // Loại bỏ xác thực ModelState cho
ImageUrl
            if (id != product.Id)
            {
                return NotFound();
            }

              if (ModelState.IsValid)
              {

                var existingProduct = await
_productRepository.GetByIdAsync(id); // Giả định có phương thức GetByIdAsync

                    // Giữ nguyên thông tin hình ảnh nếu không có hình mới được
tải lên
                    if (imageUrl == null)
                    {
                         product.ImageUrl = existingProduct.ImageUrl;
                    }
                    else
                    {
                         // Lưu hình ảnh mới
                         product.ImageUrl = await SaveImage(imageUrl);
                    }
                    BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   51
                 // Cập nhật các thông tin khác của sản phẩm
                 existingProduct.Name = product.Name;
                 existingProduct.Price = product.Price;
                 existingProduct.Description = product.Description;
                 existingProduct.CategoryId = product.CategoryId;
                 existingProduct.ImageUrl = product.ImageUrl;

                 await _productRepository.UpdateAsync(existingProduct);

                 return RedirectToAction(nameof(Index));
             }
             var categories = await _categoryRepository.GetAllAsync();
             ViewBag.Categories = new SelectList(categories, "Id", "Name");
             return View(product);
         }

         // Hiển thị form xác nhận xóa sản phẩm
         public async Task<IActionResult> Delete(int id)
         {
             var product = await _productRepository.GetByIdAsync(id);
             if (product == null)
             {
                 return NotFound();
             }
             return View(product);
         }

         // Xử lý xóa sản phẩm
         [HttpPost, ActionName("DeleteConfirmed")]
         public async Task<IActionResult> DeleteConfirmed(int id)
         {
             await _productRepository.DeleteAsync(id);
             return RedirectToAction(nameof(Index));
         }
     }
}

     Tạo và Cập nhật Views

    Xây dựng các view của `ProductController` trong ASP.NET Core MVC, bao gồm các
trang hiển thị danh sách sản phẩm, thêm sản phẩm mới, cập nhật thông tin sản phẩm,
và xóa sản phẩm.

     Index.cshtml (Danh sách sản phẩm)

    @model IEnumerable<YourNamespace.Models.Product>

    <h2>Products</h2>

    <table class="table">
        <thead>
52    BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



         <tr>
             <th>Name</th>
             <th>Price</th>
             <th>Description</th>
             <th>Category</th>
             <th>Actions</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var product in Model)
    {
        <tr>
           <td>@product.Name</td>
           <td>@product.Price</td>
           <td>@product.Description</td>
           <td>@product.Category?.Name</td>
           <td>
            <a asp-action="Display" asp-route-id="@product.Id">View</a> |
            <a asp-action="Update" asp-route-id="@product.Id">Edit</a> |
            <a asp-action="Delete" asp-route-id="@product.Id">Delete</a>
           </td>
        </tr>
    }
    </tbody>
</table>

 Add.cshtml (Thêm sản phẩm mới)

@model YourNamespace.Models.Product
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Add Product";
}

<h2>Add Product</h2>

<form asp-action="Add" method="post" enctype="multipart/form-data">
    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Price"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>
    <div class="form-group">
                  BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   53
           <label asp-for="Description"></label>
           <textarea asp-for="Description" class="form-control"></textarea>
           <span asp-validation-for="Description" class="text-
danger"></span>
       </div>
       <div class="form-group">
           <label asp-for="CategoryId">Category</label>
           <select    asp-for="CategoryId"    asp-items="ViewBag.Categories"
class="form-control"></select>
       </div>
       <div class="form-group">
           <label asp-for="ImageUrl">Product Image</label>
           <input type="file" asp-for="ImageUrl" class="form-control" />
       </div>
       <button type="submit" class="btn btn-primary">Add</button>
   </form>

   Display.cshtml (Hiển thị thông tin chi tiết sản phẩm)

  @model YourNamespace.Models.Product

  <h2>@Model.Name</h2>

   <div>
       <h3>Price: @Model.Price</h3>
       <p>@Model.Description</p>
       @if (!string.IsNullOrEmpty(Model.ImageUrl))
       {
           <img src="@Model.ImageUrl" alt="Product Image" style="max-width:
200px;"/>
       }
   </div>

  <a asp-action="Index">Back to List</a>


   Update.cshtml (Cập nhật thông tin sản phẩm)

  @model YourNamespace.Models.Product
  @using Microsoft.AspNetCore.Mvc.Rendering
  @{
      ViewData["Title"] = "Edit Product";
  }

  <h2>Edit Product</h2>

  <form asp-action="Update" method="post" enctype="multipart/form-data">
      <input type="hidden" asp-for="Id" />
  54     BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



       <div class="form-group">
           <label asp-for="Name"></label>
           <input asp-for="Name" class="form-control" />
           <span asp-validation-for="Name" class="text-danger"></span>
       </div>
       <div class="form-group">
           <label asp-for="Price"></label>
           <input asp-for="Price" class="form-control" />
           <span asp-validation-for="Price" class="text-danger"></span>
       </div>
       <div class="form-group">
           <label asp-for="Description"></label>
           <textarea asp-for="Description" class="form-control"></textarea>
           <span asp-validation-for="Description" class="text-
danger"></span>
       </div>
       <div class="form-group">
       <label asp-for="CategoryId">Category</label>
       <select asp-for="CategoryId" asp-items="@ViewBag.Categories"
class="form-control"></select>
       </div>
     <div class="form-group">
           <label asp-for="ImageUrl">Product Image</label>
           <input type="file" asp-for="ImageUrl" class="form-control" />
           <img src="@Model.ImageUrl" alt="Product Image" style="max-width:
200px;"/>
       </div>
       <button type="submit" class="btn btn-primary">Update</button>
   </form>

   Delete.cshtml (Xác nhận xóa sản phẩm)

  @model YourNamespace.Models.Product

  <h2>Delete Product</h2>

  <form asp-action="DeleteConfirmed" method="post">
      <input type="hidden" asp-for="Id" />
      <p>Are you sure you want to delete @Model.Name?</p>
      <button type="submit" class="btn btn-danger">Delete</button>
  </form>
                   BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   55


3.1.3 Kết quả
  Kết quả, hướng dẫn trên chỉ cơ bản. Sinh viên hoàn thiện thêm để được kết qua bên
  dưới. Áp dụng bài số 2 (thiết kế giao diện) để hoàn thiện thêm.

  Trang chủ website.




  Trang chi tiết sản phẩm.
  56     BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



   Trang Edit sản phẩm.




3.1.4 Yêu cầu bổ sung
   Yêu cầu:

   Ở trang chỉnh sửa sản phẩm Update.cshtml, khi thay đổi ảnh khác thì ảnh sẽ cập
nhật hình ảnh hiện ngay trên trang.

   Gợi ý dùng:

   <div class="form-group">
        <label asp-for="ImageUrl">Product Image</label>
        <input type="file" asp-for="ImageUrl" class="form-control"
id="imageInput" />
        <div class="form-group">
            <input type="submit" value="Save" class="btn btn-primary"
/>
        </div>
</form>
    </div>
<div class="col-8">
    <img src="@Model.ImageUrl" alt="Product Image" style="max-
width:200px;" id="previewImage" />
</div>
</div>
                 BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   57

<script>
    document.querySelectorAll('input[type="file"]').forEach(input => {
        input.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = document.getElementById("previewImage")
                    img.src = e.target.result
                };
                reader.readAsDataURL(file);
            }
        });
    });
</script>
  Thực hiện cho các chức năng CRUD tương tự cho Category

   CategoriesController

public class CategoriesController : Controller
 {
     private readonly IProductRepository _productRepository;
     private readonly ICategoryRepository _categoryRepository;

     public CategoriesController(IProductRepository productRepository,
ICategoryRepository categoryRepository)
     {
         _productRepository = productRepository;
         _categoryRepository = categoryRepository;
     }
     public async Task<IActionResult> Index()
     {
         var category = await _categoryRepository.GetAllAsync();
         return View(category);
     }

     public async Task<IActionResult> Display(int id)
     {

         var category = await _categoryRepository.GetByIdAsync(id);
         if (category == null)
         {
             return NotFound();
         }

         return View(category);
     }
58   BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)



 public IActionResult Add()
 {
     return View();
 }

 [HttpPost]
 public async Task<IActionResult> Add( Category category)
 {
     if (ModelState.IsValid)
     {
         _categoryRepository.AddAsync(category);
         return RedirectToAction(nameof(Index));
     }
     return View(category);
 }

 public async Task<IActionResult> Update(int id)
 {
     var category = await _categoryRepository.GetByIdAsync(id);
     if (category == null)
     {
         return NotFound();
     }
     return View(category);
 }

 [HttpPost]
 public async Task<IActionResult> Update(int id, Category category)
 {
     if (id != category.Id)
     {
         return NotFound();
     }

     if (ModelState.IsValid)
     {
             _categoryRepository.UpdateAsync(category);
             return RedirectToAction(nameof(Index));
     }
     return View(category);
 }
 public async Task<IActionResult> Delete(int id)
 {

     var category = await _categoryRepository.GetByIdAsync(id);
     if (category == null)
     {
         return NotFound();
                      BÀI 3: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 1)   59
             }

             return View(category);
        }

        [HttpPost, ActionName("DeleteConfirmed")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {

             var category = await _categoryRepository.GetByIdAsync(id);
             if (category != null)
             {
                 _categoryRepository.DeleteAsync(id);
             }
             return RedirectToAction(nameof(Index));
        }
}
    Lưu ý:

    -   Thay thế ‘YourNamespace.Models.Product` với namespace thực tế của model
        `Product` trong dự án của bạn.

    -   Đảm bảo rằng `ViewBag.Categories` được đúng cách gán giá trị trong
        controller trước khi gửi đến `Add.cshtml` và `Update.cshtml`.

    -   Thêm logic để xử lý đường dẫn hình ảnh trong `Display.cshtml` và
        `Update.cshtml` tùy theo cách bạn lưu trữ và truy xuất hình ảnh.
  60       BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)




BÀI 4: XÂY DỰNG ỨNG DỤNG
                      WEB BÁN HÀNG VỚI
                      ASP.NET CORE MVC
                      (PHẦN 2)
   Sau khi học xong bài này, sinh viên có thể nắm được:

   -    Sử dụng Identity Core để thực hiện các chức năng quản lý người dùng trong ứng
        dụng

   -    Kỹ năng sử dụng Area trong ASP.NET Core MVC để phân tách và tổ chức các chức
        năng quản trị ra khỏi phần còn lại của ứng dụng web. Điều này giúp tăng cường
        bảo mật và rõ ràng trong cấu trúc ứng dụng.

   -    Tạo khu vực Admin để chứa các chức năng như quản lý người dùng, cài đặt hệ
        thống, báo cáo, và các công cụ quản trị khác.


4.1 Bài thực hành
    Yêu cầu

   Tích hợp Identity Core vào ứng dụng web bán hàng ở bài thực hành LAB 2 để quản
lý người dùng.

       Thiết lập một Area Admin trong ứng dụng web bán hàng để tách biệt chức năng
dành cho người quản trị.


4.2 Hướng dẫn thực hiện
4.2.1 Cấu Hình ASP.NET Core Identity

    Cài Đặt Gói NuGet Cần Thiết

   Cài đặt các gói sau bằng NuGet:
                      BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   61
  -   ‘ Microsoft.AspNetCore.Identity.EntityFrameworkCore` phiên bản 8.0.3




  Cấu hình ASP.NET Core Identity trong `ApplicationDbContext` và `Program.cs`:

   ApplicationDbContext.cs

  using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
  using Microsoft.EntityFrameworkCore;
  using YourNamespace.Models; // Thay thế bằng namespace thực tế của bạn

   public class ApplicationDbContext : IdentityDbContext
   {
       public
ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
           : base(options)
       {
       }

       public DbSet<Product> Products { get; set; }
       public DbSet<Category> Categories { get; set; }
       // Các DbSet khác nếu cần
  }

   Program.cs

  using   Microsoft.AspNetCore.Identity;
  using   Microsoft.EntityFrameworkCore;
  using   WebsiteBanHang.DataAccess;
  using   WebsiteBanHang.Repositories;

  var builder = WebApplication.CreateBuilder(args);

  // Add services to the container.
  builder.Services.AddControllersWithViews();
  62    BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)




   builder.Services.AddDbContext<ApplicationDbContext>(options =>
       options.UseSqlServer(builder.Configuration.GetConnectionString("
DefaultConnection")));

  builder.Services.AddIdentity<IdentityUser, IdentityRole>()
          .AddDefaultTokenProviders()
          .AddDefaultUI()
          .AddEntityFrameworkStores<ApplicationDbContext>();

  builder.Services.AddRazorPages();

   builder.Services.AddScoped<IProductRepository,
EFProductRepository>();
   builder.Services.AddScoped<ICategoryRepository,
EFCategoryRepository>();

  var app = builder.Build();

  // Configure the HTTP request pipeline.
  if (!app.Environment.IsDevelopment())
  {
      app.UseExceptionHandler("/Home/Error");
  }
  app.UseStaticFiles();

  app.UseRouting();
  app.UseAuthentication();;

  app.UseAuthorization();

  app.MapRazorPages();
  app.MapControllerRoute(
      name: "default",
      pattern: "{controller=Home}/{action=Index}/{id?}");

  app.Run();
                     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   63
   Add thêm Nuget: Microsoft.AspNetCore.Identity.UI




   Cập nhật Database

    Add-Migration AddIdentity

    Update-Database




4.2.2 Scaffolding ASP.NET Core Identity
  Sử dụng ASP.NET Core scaffolder để thêm các view đăng nhập và đăng ký:

  1. Trong Visual Studio, click chuột phải vào project, chọn Add -> New
    Scaffolded Item.
  2. Chọn Identity và click Add.
64    BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



3. Chọn các pages bạn muốn thêm, ví dụ: Login, Logout và Register.
4. Chọn Add.
                  BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   65
  Quay về Program.cs xoá dòng bên dưới




4.2.3 Thêm Liên Kết Đăng Ký và Đăng Nhập

  Cập nhật `_Layout.cshtml` để thêm các liên kết đăng ký và đăng
   nhập:




 Kết quả
  66     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)




   Thay đổi giao diện trang đăng ký và đăng nhập cho phù hợp với trang _Layout mặc
định.

   Sau khi tiến hành đăng ký, các bạn kiểm tra dữ liệu có lưu vào CSDL hay chưa??
                        BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   67




   Thêm các thông tin bổ sung cho trang đăng ký như: FullName,
      Address, Age,...vvv

  Ta thêm một số thuộc tính về thông tin người dùng ta tạo một class
ApplicationUser trong Models.

     ApplicationUser.cs

      public class ApplicationUser: IdentityUser {
           [Required]
           public string FullName { get; set; }
            public string? Address { get; set; }
            public string? Age { get; set; }
       }
68     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



Trong ApplicationDBContext ta tiến hành thay đổi như sau:

   ApplicationDBContext.cs




 Bây giờ ta sẽ Add Migration để cập nhật các thông tin người dùng. Sử
    dụng câu lệnh:

 Add-Migration ExtendIdentityUser

 Tiếp theo ta sẽ update database bằng câu lệnh: Update-Database
                     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   69
  Sau khi Add xong các thông tin bổ xung của người dùng được cập nhật thêm.




     Sau khi Update Database thành công -> Refresh lại CSDL




  Tiếp theo ta mở class Register.cshtml.cs trong phần CreateUser ta sẽ đổi từ
IdentityUser thành ApplicationUser
70      BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



   Register.cshtml.cs




 Để đăng ký tài khoản chứa trường FullName ta tiến hành:

    -   Tại Program.cs yêu cầu chỉnh sửa như sau:
                   BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   71
 Trong Register.cshtml.cs thêm thuộc tính FullName tại InputModel




   Quay lại Register.cshtml tạo Form Input cho trường FullName
72      BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



   Vào phần _LoginPartial.cshtml thay thế IdentityUser  ApplicationUser




   Thực hiện Add lại Scaffolded Item.

    Sử dụng ASP.NET Core scaffolder để thêm các view đăng nhập và đăng ký:

    1. Trong Visual Studio, click chuột phải vào project, chọn Add -> New Scaffolded
    Item.

    2. Chọn Identity và click Add.

    3. Chọn các pages bạn muốn thêm, ví dụ: Login, Logout và Register.

    4. Chọn Add.

Sau khi Add lại thì sẽ sinh ra dòng bên dưới, các bạn xoá đi là được
                   BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   73
 Thêm lại thuộc tính FullName tại InputModel (Vì add lại bị xoá đi)




   Vào Register.cshtml.cs bổ sung dưới mục OnPostAsync




   Quay lại Register.cshtml tạo Form Input cho trường FullName
  74          BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



4.2.4 Phần vùng Area
   Để tạo và thiết lập một Area Admin trong ứng dụng web bán hàng với ASP.NET Core
MVC, bạn có thể làm theo các bước chi tiết sau:

   1. Tạo Area Admin

        - Trong Visual Studio, Chuột phải vào Area, đặt tên là `Admin`, và tạo area.

   2. Tạo Controllers và Views trong Admin Area:

        - Trong `Areas/Admin`, tạo các thư mục `Controllers` và `Views`.




   Tiếp theo ta sẽ tạo một Class SD và để tạo các vai trò cho người dùng.

       SD.cs tạo vào Folder Models

   namespace YourNameSpace.Models
   {
       public static class SD {
                 public const string Role_Customer = "Customer";
                 public const string Role_Company = "Company";
                 public const string Role_Admin = "Admin";
                 public const string Role_Employee = "Employee";
          }
   }
                     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   75
-   Ta   sẽ   thêm   phần     private      readonly       RoleManager<IdentityRole>
    _roleManager; vào trong public class RegisterModel : PageModel và
    RoleManager<IdentityRole> roleManager, và

    _roleManager = roleManager vào trong public RegisterModel trong
    Register.cshtml.cs
76    BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



Tiếp theo để gọi danh sách quyền cho người dùng ta cần thêm RoleList như sau:




Trong phần OnGetAsync ta sẽ tạo như sau:
                        BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   77
  Tiếp theo trong phần OnPostAsync ta sẽ cho xử lý nếu người dùng đăng ký thành
công.




       Để hiển thị được danh sách Role vừa thêm. Thêm đoạn bên dưới: Register.cshtml




Sau khi tiến hành khởi chạy xong. Vào CSDL kiểm tra AspNetRoles đã lưu vào hay
chưa
  78        BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)



      - Để phân quyền Admin trong ProductController của Admin ta sử dụng:




       - Tạo các view tương ứng trong `Areas/Admin/Views/Admin`.

      Ví dụ minh hoạ:




      3. Cấu hình Routing cho Admin Area:

        - Trong `Program.cs`, thêm cấu hình routing cho admin area:

app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
      name: "Admin",
      pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");
    endpoints.MapControllerRoute(
      name: "default",
      pattern: "{controller=Home}/{action=Index}/{id?}");
});
                   BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)   79
     - Hiển thị thông báo lỗi về việc hạn chế quyền truy cập và chỉ cho phép người
 dùng có quyền Admin:




     - Người dùng là User muốn truy cập vào đường dẫn Admin thì sẽ hiện thông
 báo dưới đây:




4. Thêm Chức Năng Quản Lý Sản Phẩm:

  - Tạo `ProductController` trong `Areas/Admin/Controllers`.

  - Thêm các action `Index`, `Add`, `Edit`, `Delete` cho việc quản lý sản phẩm.

  - Tạo các view tương ứng trong `Areas/Admin/Views/Product`.

5. Quản Lý Đơn Hàng:

  - Tương tự, tạo `OrderController` trong `Areas/Admin` và các view tương ứng.
 80     BÀI 4: XÂY DỰNG ỨNG DỤNG WEB BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 2)




4.3 Yêu cầu bổ sung
 -   Xây dựng lại giao diện cho các trang đăng nhập, đăng ký

 -   Xây dựng một trang layout mới với mẫu tùy chỉnh phù hợp với một trang web
     bán hàng, áp dụng trang layout mới này cho tất cả các trang con.

 -   Triển khai hoàn chỉnh các chức năng cho người quản trị như Thêm/Xóa/Sửa Sản
     phẩm, danh mục, đơn hàng, ...vvv
                       BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   81



BÀI 5: XÂY DỰNG ỨNG DỤNG
                       WEBSITE BÁN HÀNG
                       VỚI ASP.NET CORE MVC
                       (PHẦN 3)
   Sau khi học xong bài này, sinh viên có thể nắm được:

   -   Xây dựng chức năng giỏ hàng và đặt hàng trong ứng dụng ASP.NET Core MVC


5.1 Mục tiêu của bài thực hành
5.1.1 Yêu cầu
   Xây dựng chức năng giỏ hàng và đặt hàng trong ứng dụng ASP.NET Core MVC


5.1.2 Xây dựng giao diện hiển thị Danh sách sản phẩm
       người dùng
   Để xây dựng trang Home hiển thị danh sách sản phẩm và giỏ hàng, bạn thực hiện
các bước sau:

    Tại “_Layout.cshtml” nhúng bootstrap icon

<!-- Bootstrap icons-->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css"
 rel="stylesheet" />
     82    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)



      Thêm button giỏ hàng




      Xây dựng giao diện danh sách sản phẩm:

      -   Tại HomeController.cs




      -   Hiển thị giao diện sản phẩm: Vào Views -> Home -> Index.cshtml

@model IEnumerable<YourNameSpace.Models.Product>

@{
     ViewData["Title"] = "Home Page";
}

<section class="py-2">
    <div class="container px-4 px-lg-5 mt-5">
                    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   83
        <div class="row gx-4 gx-lg-5 row-cols-2 row-cols-md-3 row-cols-xl-4 justify-
content-center">

                @foreach (var item in Model)
                {
                <div class="col mb-5">
                     <div class="card gap-3" style="width: 18rem">
                         <img src="@item.ImageUrl" class="card-img-top" alt="..."
style="height: 300px">
                         <div class="card-body">
                             <h5 class="card-title">@Html.DisplayFor(modelItem =>
item.Name)</h5>
                             <div class="d-flex">
                                 <span>Price: </span>
                                 <p class="mx-3">@item.Price.ToString("#,##0") Vnđ</p>
                            </div>
                             <a> <button class="btn btn-outline-dark">
                    <i class="bi-cart-fill me-1"></i> Add to Cart </button>
                    </a>
                  </div>
                     </div>
                </div>
                }
        </div>
    </div>
   </section>

   Giao diện sau khi hoàn thành:
  84     BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)




5.2 Hướng dẫn thực hiện
5.2.1 Code mẫu thực hiện chức năng giỏ hàng
  Để xây dựng một chức năng giỏ hàng sử dụng session trong ASP.NET Core, bạn cần
thực hiện các bước sau:

    Cấu Hình Session trong `Program.cs`

  var builder = WebApplication.CreateBuilder(args);

  // Đặt trước AddControllersWithViews();
  builder.Services.AddDistributedMemoryCache();
  builder.Services.AddSession(options =>
  {
      options.IdleTimeout = TimeSpan.FromMinutes(30);
      options.Cookie.HttpOnly = true;
      options.Cookie.IsEssential = true;
  });

  builder.Services.AddControllersWithViews();

  var app = builder.Build();

  // Đặt trước UseRouting
  app.UseSession();

  // Các middleware khác...
  app.UseRouting();

  app.UseEndpoints(endpoints =>
  {
    endpoints.MapControllerRoute(
      name: "Admin",
      pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");
    endpoints.MapControllerRoute(
      name: "default",
      pattern: "{controller=Home}/{action=Index}/{id?}");
  });
  app.MapRazorPages();
  app.Run();
                 BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   85
   Tạo Folder Extensions. Tạo file SessionExtensions.cs để làm việc với
     Session.

using System.Text.Json;

namespace YourNameSpace.Extensions
{
   public static class SessionExtensions
   {
       public static void SetObjectAsJson(this ISession session, string
key, object value)
       {
           session.SetString(key, JsonSerializer.Serialize(value));
       }

       public static T GetObjectFromJson<T>(this ISession session,
string key)
       {
           var value = session.GetString(key);
           return value == null ? default :
JsonSerializer.Deserialize<T>(value);
       }
   }
}

   Tạo CartItem.cs trong Models

  public class CartItem
  {
      public int ProductId { get; set; }
      public string Name { get; set; }
      public decimal Price { get; set; }
      public int Quantity { get; set; }
  }

   ShoppingCart.cs

   public class ShoppingCart
   {
       public List<CartItem> Items { get; set; } = new
List<CartItem>();

       public void AddItem(CartItem item)
       {
           var existingItem = Items.FirstOrDefault(i => i.ProductId ==
item.ProductId);
           if (existingItem != null)
           {
  86         BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)



                       existingItem.Quantity += item.Quantity;
                }
                else
                {
                       Items.Add(item);
                }
         }

         public void RemoveItem(int productId)
         {
             Items.RemoveAll(i => i.ProductId == productId);
         }

         // Các phương thức khác...
  }

   Tạo `ShoppingCartController`

public class ShoppingCartController : Controller
{

private readonly IProductRepository _productRepository;

public ShoppingCartController(IProductRepository productRepository)
{
    _productRepository = productRepository;
}
public async Task<IActionResult> AddToCart(int productId, int quantity)
{
    // Giả sử bạn có phương thức lấy thông tin sản phẩm từ productId
    var product = await GetProductFromDatabase(productId);

    var cartItem = new CartItem
    {
        ProductId = productId,
        Name = product.Name,
        Price = product.Price,
        Quantity = quantity
    };
    var cart = HttpContext.Session.GetObjectFromJson<ShoppingCart>("Cart") ??
new ShoppingCart();
    cart.AddItem(cartItem);

      HttpContext.Session.SetObjectAsJson("Cart", cart);

    return RedirectToAction("Index");
}
public IActionResult Index()
{
                   BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   87
    var cart = HttpContext.Session.GetObjectFromJson<ShoppingCart>("Cart") ??
new ShoppingCart();
    return View(cart);
}
// Các actions khác...
private async Task<Product> GetProductFromDatabase(int productId)
{
    // Truy vấn cơ sở dữ liệu để lấy thông tin sản phẩm
    var product = await _productRepository.GetByIdAsync(productId);
    return product;
}

public IActionResult RemoveFromCart(int productId)
{
    var cart = HttpContext.Session.GetObjectFromJson<ShoppingCart>("Cart");

     if (cart is not null)
     {
         cart.RemoveItem(productId);

         // Lưu lại giỏ hàng vào Session sau khi đã xóa mục
         HttpContext.Session.SetObjectAsJson("Cart", cart);
     }

     return RedirectToAction("Index");
}



     Quay về Home -> Index.cshtml để xử lý thêm sản phẩm vào giỏ hàng
  88    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)



   Index.cshtml (Trong Views/ShoppingCart)

  @model ShoppingCart

  <h2>Your Cart</h2>

   <table>
       <tr>
           <th>Product</th>
           <th>Quantity</th>
           <th>Price</th>
           <th>Total</th>
       </tr>
       @foreach (var item in Model.Items)
       {
           <tr>
                <td>@item.Name</td>
                <td>@item.Quantity</td>
                <td>@item.Price</td>
                <td>@(item.Price * item.Quantity)</td>
                <td>
                  <a asp-action="RemoveFromCart" asp-route-
productId="@item.ProductId">Remove</a>
                </td>
           </tr>
       }
   </table>
   <a asp-action="Checkout" class="btn btn-success m-2">Tới trang thanh
toán</a>


5.2.2 Hướng dẫn thực hiện chức năng đặt hàng

   Model `Order`

  public class Order
  {
      public int Id { get; set; }
      public string UserId { get; set; }
      public DateTime OrderDate { get; set; }
      public decimal TotalPrice { get; set; }

       public string ShippingAddress { get; set; }
       public string Notes { get; set; }

       [ForeignKey("UserId")]
                    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   89
        [ValidateNever]
        public ApplicationUser ApplicationUser { get; set; }
        public List<OrderDetail> OrderDetails { get; set; }

   }

    OrderDetail (Chi Tiết Đơn Hàng): Lưu thông tin chi tiết cho mỗi mặt
       hàng trong đơn.

   public class OrderDetail
   {
       public int Id { get; set; }
       public int OrderId { get; set; }
       public int ProductId { get; set; }
       public int Quantity { get; set; }
       public decimal Price { get; set; }

        public Order Order { get; set; }
        public Product Product { get; set; }
   }

        Cập Nhật ApplicationDbContext

   Thêm DbSet cho các lớp mới vào ApplicationDbContext.

   public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
   {
       // ... Các DbSet hiện có ...

        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
   }

    Add Migration và update database

   Add-Migration initialOrder

   Update-Database

    `ShoppingCartController` để Xử Lý Đặt Hàng

   Trong `ShoppingCartController`, cập nhật action `Checkout` để xử lý thông tin địa
chỉ giao hàng và ghi chú.

   [Authorize]
   public class ShoppingCartController : Controller
   {
       private readonly IProductRepository _productRepository;
  90    BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)



       private readonly ApplicationDbContext _context;
       private readonly UserManager<ApplicationUser> _userManager;
       public ShoppingCartController(ApplicationDbContext context,
UserManager<ApplicationUser> userManager, IProductRepository
productRepository)
   {
       _productRepository = productRepository;
       _context = context;
       _userManager = userManager;
   }
       public IActionResult Checkout()
       {
           return View(new Order());
       }

       [HttpPost]
       public async Task<IActionResult> Checkout(Order order)
       {
           var cart =
HttpContext.Session.GetObjectFromJson<ShoppingCart>("Cart");
           if (cart == null || !cart.Items.Any())
           {
               // Xử lý giỏ hàng trống...
               return RedirectToAction("Index");
           }

           var user = await _userManager.GetUserAsync(User);
           order.UserId = user.Id;
           order.OrderDate = DateTime.UtcNow;
           order.TotalPrice = cart.Items.Sum(i => i.Price *
i.Quantity);
           order.OrderDetails = cart.Items.Select(i => new OrderDetail
           {
               ProductId = i.ProductId,
               Quantity = i.Quantity,
               Price = i.Price
           }).ToList();

           _context.Orders.Add(order);
           await _context.SaveChangesAsync();

           HttpContext.Session.Remove("Cart");

           return View("OrderCompleted", order.Id); // Trang xác nhận
hoàn thành đơn hàng
       }
                     BÀI 5: XÂY DỰNG ỨNG DỤNG WEBSITE BÁN HÀNG VỚI ASP.NET CORE MVC (PHẦN 3)   91
  }

   Tạo View `Checkout` Checkout.cshtml

  Tạo một view mới để nhập thông tin đặt hàng, bao gồm địa chỉ giao hàng và ghi
chú.

  @model Order

  <h2>Checkout</h2>

  <form asp-action="Checkout" method="post">
      <div class="form-group">
          <label asp-for="ShippingAddress">Shipping Address</label>
          <input asp-for="ShippingAddress" class="form-control" />
      </div>
      <div class="form-group">
          <label asp-for="Notes">Notes</label>
          <textarea asp-for="Notes" class="form-control"></textarea>
      </div>
        <button type="submit" class="btn btn-primary">Place Order</button>
  </form>

   Cập Nhật View `OrderCompleted` OrderCompleted.cshtml

  Cập nhật view `OrderCompleted` để hiển thị thông tin xác nhận đơn hàng.

  @model int

  <h2>Order Completed</h2>
  <p>Your order with ID @Model has been placed successfully.</p>

5.2.3 Yêu cầu bổ sung
  -    Xây dựng giao diện thân thiện cho giỏ hàng.
  92       BÀI 6: RESTful API




BÀI 6: RESTful API
   Sau khi học xong bài này, sinh viên có thể nắm được:

   -   Hiểu Về RESTful API: Nắm vững các khái niệm cơ bản của RESTful API, bao gồm
       các HTTP methods (GET, POST, PUT, DELETE) và cách tương tác với tài nguyên.

   -   Thiết Kế API Chuẩn RESTful: Biết cách thiết kế API theo chuẩn RESTful, bao gồm
       cách đặt endpoint, sử dụng HTTP methods, và quản lý tài nguyên.

   -   Sử Dụng ControllerBase: Hiểu cách sử dụng ControllerBase để xây dựng API
       Controllers và ánh xạ chúng với các endpoint.


6.1 Mục tiêu của bài thực hành
6.1.1 Giới thiệu
   RESTful API (Representational State Transfer) là một kiến trúc thiết kế cho các dịch
vụ web, dựa trên các nguyên tắc cơ bản như sự độc lập giữa client và server, tương tác
thể hiện qua trạng thái biểu diễn, và sử dụng các phương thức HTTP để thực hiện các
thao tác. Đây là một số nguyên tắc quan trọng của RESTful API:

      Stateless (Không Lưu Trạng Thái): Mỗi request từ client đều chứa đủ thông tin
       để server hiểu và xử lý. Server không lưu giữ trạng thái của client giữa các
       requests.

      Resource-Based (Dựa Trên Tài Nguyên): Mọi thứ trong hệ thống được xem như
       một tài nguyên (resource) và được xác định bởi URI (Uniform Resource
       Identifier).

      Representation (Biểu Diễn): Dữ liệu của tài nguyên được truyền tải giữa client và
       server dưới dạng biểu diễn, thường là JSON hoặc XML.

      CRUD Operations (Create, Read, Update, Delete): Sử dụng các phương thức HTTP
       tương ứng để thực hiện các thao tác CRUD trên tài nguyên.
                                                                BÀI 6: RESTful API   93
6.1.2 Yêu cầu
      Thiết Kế RESTful API cho CRUD Operations trên Product

      GET /api/products: Lấy danh sách tất cả sản phẩm.

      GET /api/products/{id}: Lấy thông tin chi tiết của một sản phẩm theo ID.

      POST /api/products: Tạo một sản phẩm mới.

      PUT /api/products/{id}: Cập nhật thông tin của sản phẩm theo ID.

      DELETE /api/products/{id}: Xóa một sản phẩm theo ID.


6.2 Hướng dẫn thực hiện
  Khởi động phần mềm Visual Studio 2022
  94     BÀI 6: RESTful API



  Sau khi khởi tạo xong, tái cấu trúc lại thư mục bằng cách xoá 2 file bên dưới:




   Cài Đặt Gói NuGet Cần Thiết

  Cài đặt các gói sau bằng NuGet:

  -   ‘ Microsoft.EntityFrameworkCore` phiên bản 8.0.3
  -   `Microsoft.EntityFrameworkCore.SqlServer`           phiên   bản   8.0.3     (hoặc
      provider cơ sở dữ liệu khác)
  -   `Microsoft.EntityFrameworkCore.Tools` phiên bản 8.0.3




  Dưới đây là một ví dụ đơn giản về cách xây dựng một RESTful API cho Product
trong ASP.NET Core, sử dụng Controller và Repository Pattern.
                                                          BÀI 6: RESTful API   95
     Product.cs (Model)

  public class Product
  {
      public int Id { get; set; }
      public string Name { get; set; }
      public decimal Price { get; set; }
      public string Description { get; set; }
      // Other properties
  }

 Tiến hành tạo thư mục Repositories:




     IProductRepository.cs

  public interface IProductRepository
  {
      Task<IEnumerable<Product>> GetProductsAsync();
      Task<Product> GetProductByIdAsync(int id);
      Task AddProductAsync(Product product);
      Task UpdateProductAsync(Product product);
      Task DeleteProductAsync(int id);
  }

   Cấu Hình Entity Framework Core

  Tạo một lớp `ApplicationDbContext` trong thư mục Models và cấu hình:

  using Microsoft.EntityFrameworkCore;

   public class ApplicationDbContext : DbContext
   {
      public ApplicationDbContext(DbContextOptions<ApplicationDbContext>
options) : base(options)
       {
       }
       public DbSet<Product> Products { get; set; }
   }
  96      BÀI 6: RESTful API



    Cấu hình EF Core trong file `Program.cs`:

   var builder = WebApplication.CreateBuilder(args);

   builder.Services.AddDbContext<ApplicationDbContext>(options =>

options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConne
ction")));

   // Các cấu hình khác

    Cấu hình connection string trong `appsettings.json`.

    Xem tên Server name trong SQL Server

"ConnectionStrings": {
  "DefaultConnection":
"Server=Servername;Database=DbName;Trusted_Connection=True;TrustServerCertificate=True"
},


   Add-Migration Initial

   Update-Database

      ProductRepository.cs

   public class ProductRepository : IProductRepository
   {
       private readonly ApplicationDbContext _context;

        public ProductRepository(ApplicationDbContext              context)
        {
            _context = context;
        }

        public async Task<IEnumerable<Product>> GetProductsAsync()
        {
            return await _context.Products.ToListAsync();
        }

        public async Task<Product> GetProductByIdAsync(int id)
        {
            return await _context.Products.FindAsync(id);
        }

        public async Task AddProductAsync(Product product)
                                                               BÀI 6: RESTful API   97
     {
          _context.Products.Add(product);
          await _context.SaveChangesAsync();
     }

     public async Task UpdateProductAsync(Product product)
     {
         _context.Entry(product).State = EntityState.Modified;
         await _context.SaveChangesAsync();
     }

     public async Task DeleteProductAsync(int id)
     {
         var product = await _context.Products.FindAsync(id);
         if (product != null)
         {
             _context.Products.Remove(product);
             await _context.SaveChangesAsync();
         }
     }
}
   Tiến hành khởi tạo “ProductApiController.cs” trong Controller.




[ApiController]
[Route("api/products")]
public class ProductApiController : ControllerBase
{
    private readonly IProductRepository _productRepository;

     public ProductApiController(IProductRepository productRepository)
     {
         _productRepository = productRepository;
     }

     [HttpGet]
  98       BÀI 6: RESTful API



       public async Task<IActionResult> GetProducts()
       {
           try
           {
               var products = await _productRepository.GetProductsAsync();
               return Ok(products);
           }
           catch (Exception ex)
           {
               // Handle exception
               return StatusCode(500, "Internal server error");
           }
       }

       [HttpGet("{id}")]
       public async Task<IActionResult> GetProductById(int id)
       {
           try
           {
               var product = await _productRepository.GetProductByIdAsync(id);
               if (product == null)
                   return NotFound();

                 return Ok(product);
             }
             catch (Exception ex)
             {
                 // Handle exception
                 return StatusCode(500, "Internal server error");
             }
       }

       [HttpPost]
       public async Task<IActionResult> AddProduct([FromBody] Product product)
       {
           try
           {
               await _productRepository.AddProductAsync(product);
               return CreatedAtAction(nameof(GetProductById), new { id =
product.Id }, product);
           }
           catch (Exception ex)
           {
               // Handle exception
               return StatusCode(500, "Internal server error");
           }
       }

       [HttpPut("{id}")]
       public async Task<IActionResult>      UpdateProduct(int   id,   [FromBody]
Product product)
                                                            BÀI 6: RESTful API   99
      {
          try
          {
                if (id != product.Id)
                    return BadRequest();

                await _productRepository.UpdateProductAsync(product);
                return NoContent();
          }
          catch (Exception ex)
          {
              // Handle exception
              return StatusCode(500, "Internal server error");
          }
      }

      [HttpDelete("{id}")]
      public async Task<IActionResult> DeleteProduct(int id)
      {
          try
          {
              await _productRepository.DeleteProductAsync(id);
              return NoContent();
          }
          catch (Exception ex)
          {
              // Handle exception
              return StatusCode(500, "Internal server error");
          }
      }
  }

   Quay về Program.cs bổ sung thêm

using Microsoft.EntityFrameworkCore;
using WebAPI.Models;
using WebAPI.Repositories;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddDbContext<ApplicationDbContext>(options =>

options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnec
tion")));

// Add services to the container.

builder.Services.AddControllers();

builder.Services.AddScoped<IProductRepository, ProductRepository>();
 100     BÀI 6: RESTful API




// Learn more about configuring Swagger/OpenAPI at
https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddCors(options =>
{
     options.AddPolicy(name: "MyAllowOrigins", policy =>
     {
    //Thay bằng địa chỉ localhost khi khởi chạy bên frontend (VSCode)
         policy.WithOrigins("http://127.0.0.1:5500", "http://localhost:5500")
         .AllowAnyHeader()
         .AllowAnyMethod();
     });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

//Đặt trên UseAuthorization
app.UseCors("MyAllowOrigins");

app.UseAuthorization();

app.MapControllers();

app.Run();
                                                          10
                                     BÀI 6: RESTful API   1
 Giao diện sau khi thực hiện xong




 Thêm dữ liệu vào Database
 102     BÀI 6: RESTful API



  Để xây dựng front end để gọi các API của `ProductApiController`, bạn có thể sử
dụng JavaScript hoặc một framework JavaScript như Angular, React, hoặc Vue.js.

   Các em có thể tham khảo Source Code theo link sau:
     https://drive.google.com/file/d/1xqZSMjcqh1xuCKw4XgHzqrFy1C355Q
     52/view?usp=sharing

   Mở VSCode -> Open Folder Source Code

     (Tải LiveServer để chạy localhost)




   Thực hiện lấy danh sách sản phẩm từ Database:




  Sau khi Execute xong sẽ hiển thị đường dẫn để lấy danh sách sản phẩm:
                                                                                   10
                                                              BÀI 6: RESTful API   3




   Dán đường dẫn localhost của Server vào main.js trong folder js sau
      khi mở project trong VScode và thực hiện thêm và lấy danh sách sản
      phẩm.




     Thêm và lấy danh sách Sản Phẩm (POST Create Product):

document.addEventListener('DOMContentLoaded', function () {
       fetchProducts();
       document.getElementById('btnAdd').addEventListener('click',
addProduct);
});

function fetchProducts() {
       const apiUrl = 'http://localhost:5030/api/ProductApi';
       fetch(apiUrl)
             .then(handleResponse)
             .then(data => displayProducts(data))
             .catch(error => console.error('Fetch error:',
error.message));
}

// Handle fetch response, check for error, and parse JSON
function handleResponse(response) {
    104   BÀI 6: RESTful API



        if (!response.ok) throw new Error('Network response was not
ok');
        return response.json();
}

// Display products in the HTML table
function displayProducts(products) {
       const bookList = document.getElementById('bookList');
       bookList.innerHTML = ''; // Clear existing products
       products.forEach(product => {
             bookList.innerHTML += createProductRow(product);
       });
}

// Create HTML table row for a product
function createProductRow(product) {
       return `
        <tr>
             <td>${product.id}</td>
             <td>${product.name}</td>
             <td>${product.price}</td>
             <td>${product.description}</td>
             <td>
                 <button class="btn btn-danger delete-btn" data-
id="${product.id}">Delete</button>
              <button class="btn btn-warning edit-btn" data-
id="${product.id}">Edit</button>
              <button class="btn btn-primary view-btn" data-
id="${product.id}">View</button>
         </td>
        </tr>
    `;
}

// Add a new product
function addProduct() {
       const productData = {
             name: document.getElementById('bookName').value,
             price: document.getElementById('price').value,
             description: document.getElementById('description').value,
       };

        fetch('http://localhost:5030/api/ProductApi', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(productData),
        })
                                                                                    10
                                                               BÀI 6: RESTful API   5
                 .then(handleResponse)
                 .then(data => {
                        console.log('Product added:', data);
                        fetchProducts(); // Refresh the product list
                 })
                 .catch(error => console.error('Error:', error));
}
(LƯU Ý PHẢI CHẠY SERVER LÊN TRƯỚC MỚI CHẠY ĐƯỢC GIAO DIỆN
                                     VSCODE)

     Kết quả thực hiện:




       Lấy Thông Tin Chi Tiết Sản Phẩm (GET Product by ID):

    // Thay {id} bằng ID cụ thể của sản phẩm
    const productId = 1;

    fetch(`https://your-api-url/api/products/${productId}`)
        .then(response => response.json())
        .then(product => {
            // Xử lý thông tin chi tiết sản phẩm
            console.log(product);
        })
        .catch(error => console.error('Error:', error));
       Cập Nhật Thông Tin Sản Phẩm (PUT Update Product):

    // Thay {id} và cập nhật thông tin sản phẩm
    const productIdToUpdate = 1;

    const updatedProduct = {
 106      BÀI 6: RESTful API



        id: productIdToUpdate,
        name: 'Updated Product',
        price: 150,
        description: 'An updated product',
        // Thêm các thông tin khác
  };

  fetch(`https://your-api-url/api/products/${productIdToUpdate}`, {
      method: 'PUT',
      headers: {
          'Content-Type': 'application/json',
      },
      body: JSON.stringify(updatedProduct),
  })
      .then(response => {
          if (response.status === 204) {
              console.log('Product updated successfully.');
          } else {
              console.error('Failed to update product.');
          }
      })
      .catch(error => console.error('Error:', error));
      Xóa Sản Phẩm (DELETE Product):

  // Thay {id} bằng ID cụ thể của sản phẩm cần xóa
  const productIdToDelete = 1;

  fetch(`https://your-api-url/api/products/${productIdToDelete}`, {
      method: 'DELETE',
  })
      .then(response => {
          if (response.status === 204) {
              console.log('Product deleted successfully.');
          } else {
              console.error('Failed to delete product.');
          }
      })
      .catch(error => console.error('Error:', error));

6.3 Yêu cầu bổ sung
  Hoàn thiện giao diện cho tất cả các trang Thêm/Xóa/Sửa/Đọc với API của Product ở
phần trên.
                                                                                   10
                                                             0TÀI LIỆU THAM KHẢO   7


TÀI LIỆU THAM KHẢO
1. Bài giảng Lập trình C# trên Windows, ThS. Nguyễn Hà Giang, 2010.

2. C# and .NET programing, msdn.microsoft.com, 2012.

3. Pro C# 2005 and the .NET 2.0 Platform, Andrew Troelsen, Apress, 2005.

4. C# 2.0 Practical Guide for Programmers, Michel de Champlain, Brian G. Patrick,
   Morgan Kaufmann publishers. 2005.

5. Windows Forms Programming with C#, Erik Brown, Manning Publications, 2008.

6. Microsoft Visual C# 2010 Step by Step, Microsoft Press, 2010.

7. Windows Forms 2.0 Programming, Chris Sells, Michael Weinhardt, Additon Wesley
   Professional, 2003.

8. Teach yourself .NET Windows Forms in 21 Days, Chris Payne, SAMS, 2003.

9. Source code tham khảo ở http://www.wrox.com.

10. Các topic lập trình ở www.codeguru.com, www.codeproject.com.

11. https://dotnettutorials.net/
